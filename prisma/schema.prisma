generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  FARM_MANAGER
  EMPLOYEE
}

enum Gender {
  MALE
  FEMALE
}

enum AnimalType {
  COW
  BULL
  CALF
}

enum HealthStatus {
  HEALTHY
  SICK
  RECOVERING
  QUARANTINED
}

enum DisposalReason {
  SOLD
  DIED
  SLAUGHTERED
  DONATED
  OTHER
}

enum ServingOutcome {
  SUCCESSFUL
  FAILED
  PENDING
}

enum ServingType {
  BULL
  AI
}

enum OvaType {
  PREDETERMINED
  NORMAL
}


enum PaymentMethod {
  CASH
  MPESA
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String
  role      Role     @default(EMPLOYEE)
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  treatments        Treatment[]
  disposals         Disposal[]
  servings          Serving[]
  morningProductions MorningProduction[]
  eveningProductions EveningProduction[]
  salesRecords      Sales[]

  @@map("users")
}

model Animal {
  id                   String       @id @default(cuid())
  tagNumber            String       @unique
  name                 String?
  type                 AnimalType
  gender               Gender
  birthDate            DateTime
  expectedMaturityDate DateTime?
  motherName           String?
  fatherName           String?
  healthStatus         HealthStatus @default(HEALTHY)
  weight               Float?
  image                String?
  notes                String?
  isMatured            Boolean      @default(false)
  isReadyForProduction Boolean      @default(false)
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt

  treatments        Treatment[]
  disposals         Disposal[]
  servings          Serving[]
  morningProductions MorningProduction[]
  eveningProductions EveningProduction[]

  @@map("animals")
}

model Treatment {
  id          String   @id @default(cuid())
  animalId    String
  disease     String
  medicine    String
  dosage      String
  treatment   String
  cost        Float
  treatedById String
  treatedBy   String?
  treatedAt   DateTime @default(now())
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  animal    Animal @relation(fields: [animalId], references: [id], onDelete: Cascade)
  recordedBy User   @relation(fields: [treatedById], references: [id])

  @@map("treatments")
}

model Disposal {
  id           String         @id @default(cuid())
  animalId     String         @unique
  reason       DisposalReason
  amount       Float?
  disposedAt   DateTime       @default(now())
  disposedById String
  notes        String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  animal     Animal @relation(fields: [animalId], references: [id], onDelete: Cascade)
  disposedBy User   @relation(fields: [disposedById], references: [id])

  @@map("disposals")
}

model Serving {
  id              String         @id @default(cuid())
  femaleId        String
  bullName        String?        
  servingType     ServingType
  ovaType         OvaType        @default(NORMAL)
  dateServed      DateTime       @default(now())
  servedBy        String      
  outcome         ServingOutcome @default(PENDING)
  actualBirthDate DateTime?   
  recordedById    String
  notes           String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  female     Animal @relation(fields: [femaleId], references: [id], onDelete: Cascade)
  recordedBy User   @relation(fields: [recordedById], references: [id])

  @@map("servings")
}

model MorningProduction {
  id              String    @id @default(cuid())
  animalId        String
  date            DateTime  @default(now())
  quantity_am     Float     @default(0)
  calf_quantity_fed_am Float @default(0)
  balance_am      Float     @default(0)
  recordedById    String
  notes           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  animal     Animal @relation(fields: [animalId], references: [id], onDelete: Cascade)
  recordedBy User   @relation(fields: [recordedById], references: [id])

  @@unique([animalId, date])
  @@map("morning_production")
}

model EveningProduction {
  id              String    @id @default(cuid())
  animalId        String
  date            DateTime  @default(now())
  quantity_pm     Float     @default(0)
  calf_quantity_fed_pm Float @default(0)
  balance_pm      Float     @default(0)
  recordedById    String
  notes           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  animal     Animal @relation(fields: [animalId], references: [id], onDelete: Cascade)
  recordedBy User   @relation(fields: [recordedById], references: [id])

  @@unique([animalId, date])
  @@map("evening_production")
}

model ProductionSummary {
  id                String    @id @default(cuid())
  date              DateTime?  @default(now())
  total_morning     Float?
  balance_morning   Float?
  balance_yesterday Float?
  total_evening     Float?
  balance_evening   Float?
  posho_deduction_am   Float?
  posho_deduction_pm   Float?
  createdAt         DateTime?  @default(now())
  updatedAt         DateTime?  @updatedAt

  @@unique([date])
  @@map("production_summary")
}


model Sales {
  id            String   @id @default(cuid())
  timeRecorded  DateTime @default(now())
  quantity      Float
  totalAmount   Float
  customerName  String?
  payment_method PaymentMethod
  soldById      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  soldBy User    @relation(fields: [soldById], references: [id])

  @@map("sales")
}
